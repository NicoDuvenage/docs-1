@startuml
' declate title
title 1.1.1.a. Prepare Handler Consume (single message)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "Prepare-Topic-dfsp1" as TOPIC_PREPARE_DFSP1
control "Prepare Event Handler" as PREP_HANDLER
collections "Position-Topic-dfsp1" as TOPIC_POSITION_DFSP1
collections "Event-Topic" as TOPIC_EVENTS
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
entity "Transfer DAO" as TRANS_DAO
entity "Participant DAO" as PARTICIPANT_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_PREPARE_DFSP1
    participant PREP_HANDLER
    participant TOPIC_POSITION_DFSP1
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATIONS
    participant TRANS_DAO
    participant PARTICIPANT_DAO
    participant DB
end box

' start flow
activate PREP_HANDLER
group Prepare Handler Consume
    TOPIC_PREPARE_DFSP1 <- PREP_HANDLER: Consume Prepare event message for Payer
    activate TOPIC_PREPARE_DFSP1
    deactivate TOPIC_PREPARE_DFSP1

    break
        group Validate Event
            PREP_HANDLER <-> PREP_HANDLER: Validate event - Rule: type == 'prepare' && action == 'prepare'\n<color #FF0000><b>Error codes:</b> 2001</color>
        end
    end

    group Persist Event Information
        |||
        PREP_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over PREP_HANDLER, TOPIC_EVENTS :  Event Handler Consume {9.1.0} \n
        |||
    end

    group Validate Prepare Transfer
        PREP_HANDLER <-> PREP_HANDLER: <color #AAA>Schema validation of the incoming message</color>
        PREP_HANDLER <-> PREP_HANDLER: <color #AAA>Verify the message's signature (to be confirmed in future requirement)</color>
        note right of PREP_HANDLER #lightgrey
            The above validation steps are already handled by
            the ML-Adapter for the open source implementation.
            It may need to be added in future for custom adapters.
        end note
        group Validate Duplicate check
            note right of PREP_HANDLER #lightblue
                The steps for checking duplicates (currently #6 to #18) if not
                already implemented, can be optimized by first trying to insert
                into the table 'transferDuplicateCheck' which would succeed for 
                valid/new Transfer requests. When it fails because the transferId
                already exists in that table, then the hashes and transferState
                can be verified and dealt with accordingly (as they are now).
                This way, hashes and transferStates are retrieved only if it is
                a duplicate (Prepare) (since that transerId exists in the table
                'transferDuplicateCheck' already).
                Steps #6-#9 Insert;
                for failure (to insert) --> #10-#13 Transfer Exists, Retrieve Hash;
                If Hash matches --> #14-#16 Retrieve Transfer State;
                Hash does not match --> #17 
            end note
            PREP_HANDLER -> TRANS_DAO: Request to retrieve Transfer message hash (if it exists)
            activate TRANS_DAO
            TRANS_DAO -> DB: Request Transfer message hash
            hnote over DB #lightyellow
                transferDuplicateCheck
            end note
            activate DB
            TRANS_DAO <-- DB: Return hash if it exists 
            deactivate DB
            TRANS_DAO --> PREP_HANDLER: Return transfer message hash if it exists
            deactivate TRANS_DAO
            alt Transfer exists, hash matches
                PREP_HANDLER -> TRANS_DAO: Request to retrieve Transfer state
                activate TRANS_DAO
                TRANS_DAO -> DB: Request Transfer state
                hnote over DB #lightyellow
                    transfer
                    transferStateChange
                end note
                activate DB
                TRANS_DAO <-- DB: Return Transfer state
                deactivate DB
                TRANS_DAO --> PREP_HANDLER: Return Transfer state
                deactivate TRANS_DAO
                break
                    PREP_HANDLER <-> PREP_HANDLER: <color #FF0000><b>Error handling:</b></color> If transferState is ['COMMITTED', 'ABORTED']\nthen send callback to Payer with the completed transfer,\notherwise this new request can be ignored, because a callback is about to be sent to the client.
                end
            else Transfer exists, hash does not match
                break
                    PREP_HANDLER <-> PREP_HANDLER: <color #FF0000><b>Error code:</b> 3100</color>
                end
            else Transfer hash does not exist
                PREP_HANDLER -> TRANS_DAO: Request to persist transfer hash\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist hash
                hnote over DB #lightyellow
                    transferDuplicateCheck
                end note
                activate DB
                deactivate DB
                TRANS_DAO --> PREP_HANDLER: Return success
                deactivate TRANS_DAO 
            end
        end
        group Validate Payer
            PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payer Participant details (if it exists)
            activate PARTICIPANT_DAO
            PARTICIPANT_DAO -> DB: Request Participant details
            hnote over DB #lightyellow
                participant
                participantCurrency
            end note
            activate DB
            PARTICIPANT_DAO <-- DB: Return Participant details if it exists
            deactivate DB
            PARTICIPANT_DAO --> PREP_HANDLER: Return Participant details if it exists
            deactivate PARTICIPANT_DAO
            PREP_HANDLER <-> PREP_HANDLER: Validate Payer\n<color #FF0000><b>Error codes:</b> 3202</color>
        end
        group Validate Payee
            PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payee Participant details (if it exists)
            activate PARTICIPANT_DAO
            PARTICIPANT_DAO -> DB: Request Participant details
            hnote over DB #lightyellow
                participant
                participantCurrency
            end note
            activate DB
            PARTICIPANT_DAO <-- DB: Return Participant details if it exists
            deactivate DB
            PARTICIPANT_DAO --> PREP_HANDLER: Return Participant details if it exists
            deactivate PARTICIPANT_DAO
            PREP_HANDLER <-> PREP_HANDLER: Validate Payee\n<color #FF0000><b>Error codes:</b> 3203</color>
        end
        PREP_HANDLER <-> PREP_HANDLER: Validate crypto-condition\n<color #FF0000><b>Error codes:</b> 3100</color>
    end
    alt Validate Prepare Transfer (success)
        group Persist Transfer State (with transferState='RECEIVED-PREPARE')
            PREP_HANDLER -> TRANS_DAO: Request to persist transfer\n<color #FF0000><b>Error codes:</b> 2003</color>
            activate TRANS_DAO
            TRANS_DAO -> DB: Persist transfer
            hnote over DB #lightyellow
                transfer
                transferParticipant
                transferStateChange
                transferExtension
                ilpPacket
            end note
            activate DB
            deactivate DB
            TRANS_DAO --> PREP_HANDLER: Return success
            deactivate TRANS_DAO
        end

        note right of PREP_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: position,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        PREP_HANDLER -> TOPIC_POSITION_DFSP1: Route & Publish Position event for Payer\n<color #FF0000><b>Error codes:</b> 2003</color>
        activate TOPIC_POSITION_DFSP1
        deactivate TOPIC_POSITION_DFSP1
    else Validate Prepare Transfer (failure)
        note right of PREP_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <ledgerName>,
                to: <transferMessage.payerFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: {
                        "errorInformation": {
                            "errorCode": <possible codes: [2003, 3100, 3105, 3106, 3202, 3203, 3300, 3301]>
                            "errorDescription": "<refer to section 35.1.3 for description>",
                            "extensionList": <transferMessage.extensionList>
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        PREP_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payer\n<color #FF0000><b>Error codes:</b> 2003</color>
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS
    end
end
deactivate PREP_HANDLER
@enduml
