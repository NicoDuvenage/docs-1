@startuml
' declate title
title 2.1.1. Fulfil Handler Consume (Success)
autonumber
' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store
' declare actors
collections "Fulfil-Topic" as TOPIC_FULFIL
control "Fulfil Event Handler" as FULF_HANDLER
collections "Event-Topic" as TOPIC_EVENT
collections "Position-Topic-dfsp2" as TOPIC_POSITION_DFSP2
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
'entity "Transfer Duplicate Facade" as DUP_FACADE
entity "Transfer DAO" as TRANS_DAO
database "Central Store" as DB
box "Central Service" #LightYellow
    participant TOPIC_FULFIL
    participant FULF_HANDLER
    participant TOPIC_POSITION_DFSP2
    participant TOPIC_EVENT
    participant TOPIC_NOTIFICATIONS
    participant TRANS_DAO
    participant DB
end box
' start flow
activate FULF_HANDLER
group Fulfil Handler Consume (Success)
    alt Consume Single Message
        TOPIC_FULFIL <- FULF_HANDLER: Consume Prepare event message for Payer
        activate TOPIC_FULFIL
        deactivate TOPIC_FULFIL
        break
            group Validate Event
                FULF_HANDLER <-> FULF_HANDLER: Validate event - Rule: type == 'fulfil' && action == 'commit'\n<color #FF0000><b>Error codes:</b> 2001</color>
            end
        end
        group Persist Event Information
            FULF_HANDLER -> TOPIC_EVENT: Publish event information
            ref over FULF_HANDLER, TOPIC_EVENT :  Event Handler Consume {9.1.0.}
        end
        group Validate Transfer Fulfilment Duplicate Check
            FULF_HANDLER -> FULF_HANDLER: Generate transferFulfilmentId
            activate TRANS_DAO
            FULF_HANDLER -> TRANS_DAO: Request to retrieve Transfer Fulfilment message hash (if it exists)\n<color #FF0000><b>Error code:</b> 2003</color>
            TRANS_DAO -> DB: Request Transfer fulfilment duplicate message hash
            hnote over DB #lightyellow
                SELET transferId, hash
                FROM transferFulfilmentDuplicateCheck
                WHERE transferId = payload.transfer.transferId
            end note
            activate DB
            TRANS_DAO <-- DB: Return hash if it exists
            deactivate DB
            TRANS_DAO --> FULF_HANDLER: Return list of transfer fulfil message hash if it exists
            deactivate TRANS_DAO
            alt Transfer Fulfil exists, hash matches
                ' Need to check what respond with same results if finalised then resend, else ignore and wait for response
                FULF_HANDLER -> TRANS_DAO: Request to retrieve Transfer Fulfilment and Transfer state\n<color #FF0000><b>Error code:</b> 2003</color>
                activate TRANS_DAO
                TRANS_DAO -> DB: Request to retrieve Transfer Fulfilment and Transfer state
                hnote over DB #lightyellow
                    transferFulfilment
                    transferStateChange
                end note
                activate DB
                TRANS_DAO <-- DB: Return Transfer Fulfilment and Transfer state
                deactivate DB
                TRANS_DAO --> FULF_HANDLER: Return Transfer Fulfilment and Transfer state
                deactivate TRANS_DAO
                break
                    FULF_HANDLER <-> FULF_HANDLER: <color #FF0000><b>Error handling:</b></color> If transferState is ['COMMITTED', 'ABORTED'] and transferFulfilment.isValid \nthen send notification to Payee and Payer with complete transfer\nelse if not 'RESERVED' throw <color #FF0000><b>Error code:</b> 2001</color>\nelse ignore and allow normal processing to complete
                end
            else Transfer exists, hash does not match
                break If the transferFulfilment.isValid = false
                    FULF_HANDLER <-> FULF_HANDLER: <color #FF0000><b>Error code:</b> 3100</color>
                end
            else Transfer hash does not exist
                FULF_HANDLER -> TRANS_DAO: Request to persist transfer hash\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist hash
                hnote over DB #lightyellow
                    transferFulfilmentDuplicateCheck
                end note
                activate DB
                deactivate DB
                TRANS_DAO --> FULF_HANDLER: Return success
                deactivate TRANS_DAO
            end
        end
        group Validate and persist Transfer Fulfilment
            FULF_HANDLER -> TRANS_DAO: Request information for the validate checks\n<color #FF0000><b>Error code:</b> 2001</color>
            activate TRANS_DAO
            TRANS_DAO -> DB: Fetch from database
            activate DB

            DB --> TRANS_DAO
            deactivate DB
            hnote over DB #lightyellow
                transfer
            end note
            FULF_HANDLER <-- TRANS_DAO: Return transfer
            deactivate TRANS_DAO
            FULF_HANDLER ->FULF_HANDLER: Validate that Transfer.ilpCondition = SHA-256(payload.transfer.ilpFulfilment)

            group Persist fulfilment
                FULF_HANDLER -> TRANS_DAO: In all cases persist fulfilment
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist to database
                activate DB
                deactivate DB
                hnote over DB #lightyellow
                    transferFulfilment
                    transferExtension
                end note
                FULF_HANDLER <-- TRANS_DAO: Return success
                deactivate TRANS_DAO
            end
            alt Validate successful
                group Persist Transfer State (with transferState='RECEIVED-FULFIL')
                    FULF_HANDLER -> TRANS_DAO: Request to persist transfer state
                    activate TRANS_DAO
                    TRANS_DAO -> DB: Persist transfer state
                    activate DB
                    hnote over DB #lightyellow
                        transferStateChange
                    end note
                    deactivate DB
                    TRANS_DAO --> FULF_HANDLER: Return success
                end
                group Append to Settlement Window
                    FULF_HANDLER -> TRANS_DAO: Request to retrieve current/latest transfer settlement window
                    activate TRANS_DAO
                    TRANS_DAO -> DB: Fetch settlementWindowId
                    activate DB
                    DB --> TRANS_DAO
                    hnote over DB #lightyellow
                        settlementWindow
                    end note
                    deactivate DB
                    FULF_HANDLER <-- TRANS_DAO: Return settlementWindowId to be appended
                    deactivate TRANS_DAO
                end


                note right of FULF_HANDLER #yellow
                    Message:
                    {
                        id: <ID>,
                        from: <transferHeaders.FSPIOP-Source>,
                        to: <transferHeaders.FSPIOP-Destination>,
                        type: application/json,
                        content: {
                            headers: <transferHeaders>,
                            payload: <transferMessage>
                        },
                        metadata: {
                            event: {
                                id: <uuid>,
                                responseTo: <previous.uuid>,
                                type: position,
                                action: commit,
                                createdAt: <timestamp>,
                                state: {
                                    status: "success",
                                    code: 0
                                }
                            }
                        }
                    }
                end note
                FULF_HANDLER -> TOPIC_POSITION_DFSP2: Route & Publish Position event for Payee
                activate TOPIC_POSITION_DFSP2
                deactivate TOPIC_POSITION_DFSP2
            else Validate Fulfil Transfer not successful
                break
                    FULF_HANDLER -> TOPIC_NOTIFICATIONS: Route & Publish Notification event for Payee f
                    activate TOPIC_NOTIFICATIONS
                    deactivate TOPIC_NOTIFICATIONS
                end
            end
        end
    else Consume Batch Messages
        note left of FULF_HANDLER #lightblue
            To be delivered by future story
        end note
    end
end
deactivate FULF_HANDLER
@enduml
