@startuml
' declate title
title 1.3.3 Abort Position Handler Consume

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistence Store

' declare actors
control "Position Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
entity "Position DAO" as POS_DAO
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
' entity "Participant DAO" as PARTICIPANT_DAO
entity "Transfer DAO" as TRANS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TOPIC_NOTIFICATIONS
    participant POS_DAO
    ' participant PARTICIPANT_DAO
    participant TRANS_DAO
    participant DB
end box

' start flow
activate POS_HANDLER
group Abort Position Handler Consume
    opt type == 'position' && action == 'timeout-received' || type == 'position' && action == 'timeout-reserved'
        POS_HANDLER -> POS_DAO: Request current state of transfer from DB\n<color #FF0000><b>Error code:</b> 2003</color>
        activate POS_DAO
        POS_DAO -> DB: Retrieve current state of transfer from DB
        activate DB
        hnote over DB #lightyellow
            transferStateChange
        end note
        DB --> POS_DAO: Return current state of transfer from DB
        deactivate DB
        POS_DAO --> POS_HANDLER: Return current state of transfer from DB
        deactivate POS_DAO
        POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'EXPIRED')\n<color #FF0000><b>Error code:</b> 2001</color>

        group Persist Position change and Transfer State (with transferState='ABORTED' on position check pass)
            POS_HANDLER -> POS_DAO: Request to persist latest position and state to DB\n<color #FF0000><b>Error code:</b> 2003</color>
            group <color #blue>DB TRANSACTION</color>
                activate POS_DAO
                POS_DAO -> DB: Select participantPosition.value FOR UPDATE from DB for Payee
                activate DB
                hnote over DB #lightyellow
                    participantPosition
                end note
                DB --> POS_DAO: Return participantPosition.value from DB for Payee
                deactivate DB
                POS_DAO <-> POS_DAO: **latestPosition** = participantPosition.value - payload.amount.amount
                POS_DAO->DB: Persist latestPosition to DB for Payee
                hnote over DB #lightyellow
                    UPDATE **participantPosition**
                    SET value = latestPosition
                end note
                activate DB
                deactivate DB
                POS_DAO -> DB: Persist transfer state and participant position change
                hnote over DB #lightyellow
                        INSERT **transferStateChange** transferStateId = 'ABORTED'

                        INSERT **participantPositionChange**
                        SET transferStateChangeId = transferStateChange.transferStateChangeId,
                        participantPositionId = participantPosition.participantPositionId,
                        value = latestPosition,
                        reservedValue = participantPosition.reservedValue
                        createdDate = new Date()
                end note
                activate DB
                deactivate DB
                deactivate TRANS_DAO
            end
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end
        note right of POS_HANDLER #yellow
            Message: {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: {
                         "errorInformation": {
                             "errorCode": 4001,
                             "errorDescription": "Payer FSP insufficient liquidity",
                             "extensionList": <transferMessage.extensionList>
                         }
                     }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: abort,
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
    end
    opt type == 'position' && action == 'reject'
        POS_HANDLER -> POS_DAO: Request current state of transfer from DB\n<color #FF0000><b>Error code:</b> 2003</color>
        activate POS_DAO
        POS_DAO -> DB: Retrieve current state of transfer from DB
        activate DB
        hnote over DB #lightyellow
            transferStateChange
        end note
        DB --> POS_DAO: Return current state of transfer from DB
        deactivate DB
        POS_DAO --> POS_HANDLER: Return current state of transfer from DB
        deactivate POS_DAO
        POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'REJECTED')\n<color #FF0000><b>Error code:</b> 2001</color>

        group Persist Position change and Transfer State (with transferState='ABORTED' on position check pass)
            POS_HANDLER -> POS_DAO: Request to persist latest position and state to DB\n<color #FF0000><b>Error code:</b> 2003</color>
            group <color #blue>DB TRANSACTION</color>
                activate POS_DAO
                POS_DAO -> DB: Select participantPosition.value FOR UPDATE from DB for Payee
                activate DB
                hnote over DB #lightyellow
                    participantPosition
                end note
                DB --> POS_DAO: Return participantPosition.value from DB for Payee
                deactivate DB
                POS_DAO <-> POS_DAO: **latestPosition** = participantPosition.value - payload.amount.amount
                POS_DAO->DB: Persist latestPosition to DB for Payee
                hnote over DB #lightyellow
                    UPDATE **participantPosition**
                    SET value = latestPosition
                end note
                activate DB
                deactivate DB
                POS_DAO -> DB: Persist transfer state and participant position change
                hnote over DB #lightyellow
                        INSERT **transferStateChange** transferStateId = 'ABORTED'

                        INSERT **participantPositionChange**
                        SET transferStateChangeId = transferStateChange.transferStateChangeId,
                        participantPositionId = participantPosition.participantPositionId,
                        value = latestPosition,
                        reservedValue = participantPosition.reservedValue
                        createdDate = new Date()
                end note
                activate DB
                deactivate DB
                deactivate TRANS_DAO
            end
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end
        note right of POS_HANDLER #yellow
            Message: {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: abort,
                        createdAt: <timestamp>,
                        state: {
                            status: "rejected",
                            code: 0
                        }
                    }
                }
            }
        end note
    end
    ' We do not see how this scenario will be triggered
    opt type == 'position' && action == 'failed' (Unable to currently trigger this scenario)
        POS_HANDLER -> POS_DAO: Request current state of transfer from DB\n<color #FF0000><b>Error code:</b> 2003</color>
        activate POS_DAO
        POS_DAO -> DB: Retrieve current state of transfer from DB
        activate DB
        hnote over DB #lightyellow
            transferStateChange
        end note
        DB --> POS_DAO: Return current state of transfer from DB
        deactivate DB
        POS_DAO --> POS_HANDLER: Return current state of transfer from DB
        deactivate POS_DAO
        POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'FAILED')

        group Persist Position change and Transfer State (with transferState='ABORTED' on position check pass)
            POS_HANDLER -> POS_DAO: Request to persist latest position and state to DB\n<color #FF0000><b>Error code:</b> 2003</color>
            group <color #blue>DB TRANSACTION</color>
                activate POS_DAO
                POS_DAO -> DB: Select participantPosition.value FOR UPDATE from DB for Payee
                activate DB
                hnote over DB #lightyellow
                    participantPosition
                end note
                DB --> POS_DAO: Return participantPosition.value from DB for Payee
                deactivate DB
                POS_DAO <-> POS_DAO: **latestPosition** = participantPosition.value - payload.amount.amount
                POS_DAO->DB: Persist latestPosition to DB for Payee
                hnote over DB #lightyellow
                    UPDATE **participantPosition**
                    SET value = latestPosition
                end note
                activate DB
                deactivate DB
                POS_DAO -> DB: Persist transfer state and participant position change
                hnote over DB #lightyellow
                        INSERT **transferStateChange** transferStateId = 'ABORTED'

                        INSERT **participantPositionChange**
                        SET transferStateChangeId = transferStateChange.transferStateChangeId,
                        participantPositionId = participantPosition.participantPositionId,
                        value = latestPosition,
                        reservedValue = participantPosition.reservedValue
                        createdDate = new Date()
                end note
                activate DB
                deactivate DB
                deactivate TRANS_DAO
            end
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end
        note right of POS_HANDLER #yellow
            Message: {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: abort,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
    end
    POS_HANDLER -> TOPIC_TRANSFERS: Publish Transfer event\n<color #FF0000><b>Error code:</b> 2003</color>
    activate TOPIC_TRANSFERS
    deactivate TOPIC_TRANSFERS
end
deactivate POS_HANDLER
@enduml
